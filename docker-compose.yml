version: '3.7'

services: # the different images that will be running as containers
  nginx: # service name
    build: ./nginx # location of the dockerfile that defines the nginx image. The dockerfile will be used to spin up an image during the build stage
    ports:
      - 1339:80 # map the external port 1339 to the internal port 80. Any traffic from 1339 externally will be passed to port 80 of the NGINX container. To access this app, one would use an address such as 0.0.0.0:1339
    volumes: # static storages provisioned since django does not handle static files in production
      - static_volume:/home/app/microservice/static # provide a space for static files
    depends_on:
      - web # will only start if web is up and running
    restart: "on-failure" # restart service when it fails
  web: # service name
    build: . #build the image for the web service from the dockerfile in parent directory.
    # command directive passes the parameters to the service and they will be executed by the service. In this example, these are django commands which will be executed in the container where django lives.
    command: sh -c "cd leilaoOnline &&
                    cd apps &&
                    python manage.py makemigrations leilao_fbv &&
                    python manage.py makemigrations leilao_fbv_user &&
                    python manage.py migrate &&
                    python manage.py createsuperuser --no-input &&
                    gunicorn locallibrary.wsgi:application --bind 0.0.0.0:8000" # Django commands to run app using gunicorn
    volumes:
      - .:/microservice # map data and files from parent directory in host to microservice directory in docker container
      - static_volume:/home/app/microservice/static
    #env_file: # file where env variables are stored. Used as best practice so as not to expose secret keys
    #  - .env # name of the env file
    environment:
      - DJANGO_SUPERUSER_PASSWORD=pcs3643labengsoft
      - DJANGO_SUPERUSER_USERNAME=kenji
      - DJANGO_SUPERUSER_EMAIL=kenji@mail.com

    image: microservice_app # name of the image

    expose: # expose the port to other services defined here so that they can access this service via the exposed port. In the case of Django, this is 8000 by default
      - '8000' # hardcoded port
    restart: "on-failure"
    depends_on: # cannot start if db service is not up and running
      - db
  db: # service name
    image: postgres:11-alpine # image name of the postgres database. during build, this will be pulled from dockerhub and a container spun up from it
    volumes:
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
      - postgres_data:/var/lib/postgresql/data/
    environment: # access credentials from the .env file
      - POSTGRES_PASSWORD=pscs3643labengsoft
      - POSTGRES_DB=leilaoOnline
      - PGPORT=5432
      - POSTGRES_USER=kenji
    restart: "on-failure"
  
volumes:
  postgres_data:
  static_volume:
  
